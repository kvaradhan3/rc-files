function deviceHasBattery {
    case $(uname -s) in
    Darwin)
        return $(ioreg -i | grep "AppleSmartBattery " >/dev/null)
        ;;
    Linux)
        return $(test -d /sys/class/power_supply/BAT0)
        ;;
    esac
}

function _ioreg {
    case $(uname -s) in
    Darwin)
        ioreg -rc AppleSmartBattery | awk '/''"'"$1"'"''/ { print $3 }'
        ;;
    Linux)
        PWR=/sys/class/power_supply
        case $1 in
        MaxCapacity)
            if [ -f $PWR/BAT0/charge_full_design ] ; then
                cat $PWR/BAT0/charge_full_design
            else
                echo 1
            fi
            ;;
        CurrentCapacity)
            if [ -f $PWR/BAT0/charge_full_design ] ; then
                cat $PWR/BAT0/charge_now
            else
                echo 0
            fi
            ;;
        ExternalConnected|ExternalChargeCapable)
            if [ -f $PWR/AC/online -a "x$(cat $PWR/AC/online 2>&-)" != 'x0' ] ; then
                print Yes
            else
                print No
            fi
            ;;
        esac
        ;;
    *)
        print ''
        ;;
    esac
}

function bcharge {
#    red="%{\033[31m%}"
#    grn="%{\033[32m%}"
#    yel="%{\033[33m%}"
#    reset="%{\033[00m%}"
    red='%F{red}'
    grn='%F{green}'
    yel='%F{yellow}'
    reset='%f'

    acChar_='\u26A1'
    pwrArrF='\u25b8'
    pwrArrE='\u25b9'
    pwrBlkF='\u25Ae'
    pwrBlkE='\u25AF'
    pwrBlkF='\u25A0'
    pwrBlkE='\u25A1'
    pwrSymF=$pwrBlkF
    pwrSymE=$pwrBlkE

    bars=10

    maxCap=$(      _ioreg MaxCapacity           )
    curCap=$(      _ioreg CurrentCapacity       )
    extConn=$(     _ioreg ExternalConnected     )
    extCharging=$( _ioreg ExternalChargeCapable )

    charge=$(echo "$bars * ${curCap:-0} / ${maxCap:-1}" | bc)
    if   [[ $charge -gt $( expr 6 \* $bars / 10 ) ]] ; then
        colour=$grn
    elif [[ $charge -ge $( expr 4 \* $bars / 10 ) ]] ; then
        colour=$yel
    else
        colour=$red
    fi

    if [[ $extConn = 'Yes' && $extCharging = 'Yes' ]] ; then
        ac="$(printf $acChar_) "
    else
        ac=''
    fi

    fmt=''
    i=0
    while test $i -ne "$charge"  ; do
        fmt=$fmt$( printf $pwrSymF )
        i=$(expr $i + 1)
    done
    while test $i -ne $bars ; do
        fmt=$fmt$( printf $pwrSymE )
        i=$(expr $i + 1)
    done

    print "${colour}${ac}${fmt}${reset}"
}
 
if deviceHasBattery ; then
    setopt promptsubst
    export RPROMPT='$(bcharge) '"$RPROMPT"
fi
